services:
  keycloak:
    #necessario rodar com img buildada local do keycloack para importar realm, pois nao tem como FAZER isso com a img pronta
    container_name: keycloak
    hostname: keycloak
    image: keycloacklocal
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./imports:/opt/jboss/keycloak/imports
    ports:
      - "8080:8080"
    restart: always
    command:
      [ "start-dev"]

    networks:
      - timnetwork
#  AUTHORIZATION SERVER NAO SERA USADO INICIALMENTE POIS FOI OPTADO UTILIZAR O KEYCLOAK
#  authorizationserver:
#    container_name: authorizationserver
#    hostname: authorizationserver
#    image: authorizationserver
#    build:
#      context: ./authorizationserver
#      dockerfile: Dockerfile
#    ports:
#      - "8080:8080"
#    restart: always
#    networks:
#      - timnetwork
  eurekaserver:
    image: eurekaserver
    container_name: eurekaserver
    hostname: eurekaserver
    build:
      context: ./eurekaserver
      dockerfile: Dockerfile
    ports:
      - "9091:9091"
    restart: always
    networks:
      - timnetwork

  apigateway:
    container_name: apigateway
    hostname: apigateway
    image: apigateway
    build:
      context: ./apigateway
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    restart: always
    depends_on:
      - eurekaserver
      - keycloak
    networks:
      - timnetwork
    environment:
      spring.profiles.active: keycloak
      eureka.client.service-url.defaultZone: http://eurekaserver:9091/eureka
      URL_AUTH: http://keycloak
      URL_REDIS: redis
      URL_SERVICE1: http://service1:8082/
      URL_SERVICE2: http://service2:8083/
      CLIENT_ID: arquitetura_client
      CLIENT_SECRET: vcNuGKjK8SbhhOTI1G0DJsKCaR54iZBi
      security.oauth2.client.provider.keycloak.redirect-uri: http://localhost:8081/login/oauth2/code/keycloak
  service1:
    container_name: service1
    hostname: service1
    image: service1
    build:
      context: ./service1
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    restart: always
    depends_on:
      - eurekaserver
      - keycloak
    networks:
      - timnetwork
    environment:
      eureka.client.service-url.defaultZone: http://eurekaserver:9091/eureka
      URL_AUTH: http://keycloak
  service2:
    container_name: service2
    hostname: service2
    image: service2
    build:
      context: ./service2
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    restart: always
    depends_on:
      - eurekaserver
      - keycloak
    networks:
      - timnetwork
    environment:
      eureka.client.service-url.defaultZone: http://eurekaserver:9091/eureka
      URL_AUTH: http://keycloak
  redis:
    container_name: redis
    hostname: redis
    image: redis
    ports:
      - "6379:6379"
    restart: always
    networks:
      - timnetwork
networks:
  timnetwork:
    driver: bridge

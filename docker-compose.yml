services:
  keycloak:
    #necessario rodar com img buildada local do keycloack para importar realm, pois nao tem como faer isso com a img pronta
    container_name: keycloak
    hostname: keycloak
    image: keycloacklocal
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./imports:/opt/jboss/keycloak/imports
    ports:
      - "8080:8080"
    restart: always
    command:
      [ "start-dev"]

    networks:
      - timnetwork
  authorizationserver:
    container_name: authorizationserver
    hostname: authorizationserver
    image: authorizationserver
    build:
      context: ./authorizationserver
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    restart: always
    networks:
      - timnetwork
  eurekaserver:
    image: eurekaserver
    container_name: eurekaserver
    hostname: eurekaserver
    build:
      context: ./eurekaserver
      dockerfile: Dockerfile
    ports:
      - "9091:9091"
    restart: always
    networks:
      - timnetwork

  apigateway:
    container_name: apigateway
    hostname: apigateway
    image: apigateway
    build:
      context: ./apigateway
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    restart: always
    depends_on:
      - eurekaserver
      - authorizationserver
    networks:
      - timnetwork
    environment:
      eureka.client.service-url.defaultZone: http://eurekaserver:9091/eureka
      URL_AUTH: http://keycloak
      spring.cloud.gateway.routes[0].id: service1module
      spring.cloud.gateway.routes[0].uri: http://service1:8082
      spring.cloud.gateway.routes[0].predicates[0]: Path=/service1/**
      spring.cloud.gateway.routes[1].id: service2module
      spring.cloud.gateway.routes[1].uri: http://service2:8083
      spring.cloud.gateway.routes[1].predicates[0]: Path=/service2/**
  service1:
    container_name: service1
    hostname: service1
    image: service1
    build:
      context: ./service1
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    restart: always
    depends_on:
      - eurekaserver
      - authorizationserver
    networks:
      - timnetwork
    environment:
      eureka.client.service-url.defaultZone: http://eurekaserver:9091/eureka
      URL_AUTH: http://authorizationserver
  service2:
    container_name: service2
    hostname: service2
    image: service2
    build:
      context: ./service2
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    restart: always
    depends_on:
      - eurekaserver
      - authorizationserver
    networks:
      - timnetwork
    environment:
      eureka.client.service-url.defaultZone: http://eurekaserver:9091/eureka
      URL_AUTH: http://authorizationserver
networks:
  timnetwork:

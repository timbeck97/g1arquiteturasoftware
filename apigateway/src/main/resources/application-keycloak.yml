server:
  port: 8081


spring:
  application:
    name: GATEWAY-SERVICE
  data:
    redis:
      host: ${URL_REDIS:localhost}
      port: 6379
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${URL_AUTH:http://localhost}:8080/realms/arquiteturag1/protocol/openid-connect/certs
      client:
        provider:
          keycloak:
            issuer-uri: ${URL_AUTH:http://localhost}:8080/realms/arquiteturag1
        registration:
          spring-with-test-scope:
            provider: keycloak
            client-id: ${CLIENT_ID:arquitetura_client}
            clientSecret: ${CLIENT_SECRET:123456}
            authorization-grant-type: authorization_code
            scope: openid

  cloud:
    gateway:
      routes:
        - id: sevice1module
          uri: ${URL_SERVICE1:http://127.0.0.1:8082/}
          predicates:
            - Path=/service1/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 2 #numero de requisicoes permitidas por sencundo
                redis-rate-limiter.burstCapacity: 5 #
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@KeyResolverConfiguration}"
        - id: sevice2module
          uri: ${URL_SERVICE2:http://127.0.0.1:8083/}
          predicates:
            - Path=/service2/**
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 2
                redis-rate-limiter.burstCapacity: 5
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@KeyResolverConfiguration}"


eureka:
  client:
    registerWithEureka: true
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://localhost:9091/eureka
    instance:
      hostname: http://localhost

#spring.security.oauth2:
#  resourceserver:
#    jwt:
#      jwk-set-uri: ${URL_AUTH:http://localhost}:8080/realms/timbeck/protocol/openid-connect/certs
#  client:
#    provider:
#      keycloak:
#        issuer-uri: ${URL_AUTH:http://localhost}:8080/realms/timbeck
#    registration:
#      spring-with-test-scope:
#        provider: keycloak
#        client-id: timbeck-openid
#        authorization-grant-type: authorization_code
#        scope: openid
#spring.security.oauth2:
#  resourceserver:
#    jwt:
#      issuer-uri: ${URL_AUTH:http://localhost:8080}
#      jwk-set-uri: ${URL_AUTH:http://localhost:8080}/oauth2/jwks

